@page "/previoussearches"
@inject UCDASearches_Blazor.Security.ISimpleAuthService Auth
@inject UCDASearches_Blazor.Data.RequestsRepository Repo
@inject ISnackbar Snackbar

@code {
    private string? _vin;
    private DateTime? _from = DateTime.UtcNow.AddDays(-30);
    private DateTime? _to = DateTime.UtcNow;
    private bool _loading;
    private string _acctEntry = ""; // fallback input
    private List<UCDASearches_Blazor.Data.RequestRow> _rows = new();
    private const int Take = 100;

    protected override async Task OnInitializedAsync()
    {
        await EnsureAuthLoaded();
        await Load();
    }

    private async Task EnsureAuthLoaded()
    {
        if (!Auth.IsAuthenticated || string.IsNullOrWhiteSpace(Auth.AccountNumber))
            await Auth.RestoreAsync();
    }

    private async Task Load()
    {
        await EnsureAuthLoaded();
        var account = Auth.AccountNumber?.Trim();

        if (string.IsNullOrWhiteSpace(account))
        {
            _rows.Clear();
            Snackbar.Add("Missing account number. Please set it below.", Severity.Warning);
            return;
        }

        DateTime? fromUtc = _from.HasValue
            ? DateTime.SpecifyKind(_from.Value, DateTimeKind.Local).ToUniversalTime()
            : (DateTime?)null;

        DateTime? toUtc = _to.HasValue
            ? DateTime.SpecifyKind(_to.Value.Date.AddDays(1).AddTicks(-1), DateTimeKind.Local).ToUniversalTime()
            : (DateTime?)null;

        _loading = true; StateHasChanged();
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(12));
            _rows = await Repo.GetPreviousAsync(account!, _vin, fromUtc, toUtc, Take, cts.Token);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
            _rows = new();
        }
        finally { _loading = false; }
    }

    private async Task SaveAccountAndReload()
    {
        if (!string.IsNullOrWhiteSpace(_acctEntry))
        {
            await Auth.SetAccountNumberAsync(_acctEntry);
            await Load();
        }
    }

    private static string GetInitials(string? email)
    {
        if (string.IsNullOrWhiteSpace(email)) return "?";
        var name = email.Split('@')[0].Replace('.', ' ').Replace('_', ' ');
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 0) return email.Substring(0, 1).ToUpperInvariant();
        return string.Concat(parts.Take(2).Select(p => char.ToUpperInvariant(p[0])));
    }
}

