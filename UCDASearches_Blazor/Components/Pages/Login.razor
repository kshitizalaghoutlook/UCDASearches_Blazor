@page "/"
@page "/login"
@layout AuthLayout
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Nav
@inject SimpleAuthStateProvider Auth
@inject IRequestsRepository Repo

<MudCard Class="nc-card" Style="padding:24px">
    <MudStack Spacing="2" AlignItems="AlignItems.Center">
        <svg viewBox="0 0 90 48" xmlns="http://www.w3.org/2000/svg">
            <circle cx="18" cy="24" r="12" stroke="#135ea1" stroke-width="8" />
            <circle cx="45" cy="24" r="12" stroke="#135ea1" stroke-width="8" />
            <circle cx="72" cy="24" r="12" stroke="#135ea1" stroke-width="8" />
        </svg>

        <MudText Typo="Typo.h6" Class="mt-2">Log in to Nextcloud</MudText>

        <EditForm Model="@model" OnValidSubmit="HandleLogin" class="w-100">
            <DataAnnotationsValidator />
            <MudStack Spacing="2">
                <MudTextField @bind-Value="model.AccountId" Label="Username or email" Variant="Variant.Outlined"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Badge" Required="true" />
                <MudTextField @bind-Value="model.Password" Label="Password" Variant="Variant.Outlined"
                              InputType="InputType.Password" Required="true" />
                <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.ArrowForward" Class="btn-primary" FullWidth="true">
                    Log in
                </MudButton>
            </MudStack>
        </EditForm>

        @if (!string.IsNullOrWhiteSpace(error))
        {
            <MudAlert Severity="Severity.Error" Class="w-100 mt-2">@error</MudAlert>
        }

        <MudLink Href="#" Class="mt-2">Forgot password?</MudLink>
        <MudLink Href="#">Log in with a device</MudLink>
        <MudLink Href="#">Log in with a backup code</MudLink>
    </MudStack>
</MudCard>

@code {
    private string? error;
    private LoginModel model = new();

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(model.AccountId) || string.IsNullOrWhiteSpace(model.Password))
        { error = "Please enter your Account ID and password."; return; }

        var ok = await Repo.ValidateLoginAsync(model.AccountId.Trim(), model.Password);
        if (ok)
        { await Auth.SignInAsync(new AuthUser(model.AccountId.Trim(), null)); Nav.NavigateTo("/previous-searches"); }
        else error = "Invalid credentials.";
    }
    public class LoginModel { [Required] public string AccountId { get; set; } = ""; [Required] public string Password { get; set; } = ""; }
}
