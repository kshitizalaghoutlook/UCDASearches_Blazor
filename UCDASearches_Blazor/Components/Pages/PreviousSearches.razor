@page "/previous-searches"
@using System.Security.Claims
@inject AuthenticationStateProvider AuthProvider
@inject IRequestsRepository Repo

<MudPaper Class="p-4">

    <!-- Filter bar -->
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Class="mb-4">
        <MudTextField @bind-Value="accountId" Label="Account" ReadOnly="true" />
        <MudTextField @bind-Value="vin" Label="VIN" />
        <MudDatePicker @bind-Date="fromDate" Label="From" />
        <MudDatePicker @bind-Date="toDate" Label="To" />
        <MudButton OnClick="Search" Variant="Variant.Filled">Find</MudButton>
    </MudStack>

    <!-- Results table -->
    <MudTable Items="rows" Dense="true" Hover="true" Bordered="true">
        <HeaderContent>
            <MudTh>RID</MudTh>
            <MudTh>VIN</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Ontario Liens</MudTh>
            <MudTh>Auto Check</MudTh>
            <MudTh>Ontario History</MudTh>
            <MudTh>Out of Province Liens</MudTh>
            <MudTh>Carfax / Claims</MudTh>
            <MudTh>Export</MudTh>
            <MudTh>All Ontario</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.RequestID</MudTd>
            <MudTd>@context.VIN</MudTd>
            <MudTd>@context.TimeStamp.ToString("yyyy-MM-dd")</MudTd>
            <MudTd>@(context.Lien.HasValue ? context.Lien.Value.ToString() : "")</MudTd>
            <MudTd>@(context.AutoCheck.HasValue ? context.AutoCheck.Value.ToString() : "No Activity")</MudTd>
            <MudTd>@(context.History.HasValue ? context.History.Value.ToString() : "")</MudTd>
            <MudTd>@(context.EXCA.HasValue ? context.EXCA.Value.ToString() : "")</MudTd>
            <MudTd>@(context.Carfax.HasValue ? context.Carfax.Value.ToString() : "")</MudTd>
            <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small">Export</MudButton></MudTd>
            <MudTd><MudLink Href="#">View</MudLink></MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private string? accountId;
    private string? vin;
    private DateTime? fromDate = DateTime.Today.AddDays(-30);
    private DateTime? toDate = DateTime.Today;
    private IReadOnlyList<RequestDto> rows = Array.Empty<RequestDto>();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        accountId = state.User.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    private async Task Search()
    {
        // Don’t query without a logged-in account
        if (string.IsNullOrWhiteSpace(accountId))
        {
            rows = Array.Empty<RequestDto>();
            return;
        }

        // Normalize filters
        var vinFilter = string.IsNullOrWhiteSpace(vin) ? null : vin.Trim().ToUpperInvariant();

        // Make "From" inclusive (00:00) and "To" inclusive (end of day)
        DateTime? fromInclusive = fromDate?.Date;
        DateTime? toInclusive = toDate?.Date.AddDays(1).AddTicks(-1);

        try
        {
            rows = await Repo.SearchRequestsAsync(
                accountId,
                vinFilter,
                fromInclusive,
                toInclusive
            );
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Search failed: {ex}");
            rows = Array.Empty<RequestDto>();
        }
    }

}
